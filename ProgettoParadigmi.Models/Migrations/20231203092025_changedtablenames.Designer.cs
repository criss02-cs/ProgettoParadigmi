// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProgettoParadigmi.Models.Context;

#nullable disable

namespace ProgettoParadigmi.Models.Migrations
{
    [DbContext(typeof(AppuntamentiDbContext))]
    [Migration("20231203092025_changedtablenames")]
    partial class changedtablenames
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProgettoParadigmi.Models.Entities.Appuntamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrganizzatoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Titolo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizzatoreId");

                    b.ToTable("Appuntamenti");
                });

            modelBuilder.Entity("ProgettoParadigmi.Models.Entities.Partecipante", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("StatoInvito")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UtenteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("UtenteId");

                    b.ToTable("Partecipanti");
                });

            modelBuilder.Entity("ProgettoParadigmi.Models.Entities.Utente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Utenti");
                });

            modelBuilder.Entity("ProgettoParadigmi.Models.Entities.Appuntamento", b =>
                {
                    b.HasOne("ProgettoParadigmi.Models.Entities.Utente", "Organizzatore")
                        .WithMany("Appuntamenti")
                        .HasForeignKey("OrganizzatoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizzatore");
                });

            modelBuilder.Entity("ProgettoParadigmi.Models.Entities.Partecipante", b =>
                {
                    b.HasOne("ProgettoParadigmi.Models.Entities.Appuntamento", "Evento")
                        .WithMany("Partecipanti")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProgettoParadigmi.Models.Entities.Utente", "Utente")
                        .WithMany("Partecipazioni")
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("ProgettoParadigmi.Models.Entities.Appuntamento", b =>
                {
                    b.Navigation("Partecipanti");
                });

            modelBuilder.Entity("ProgettoParadigmi.Models.Entities.Utente", b =>
                {
                    b.Navigation("Appuntamenti");

                    b.Navigation("Partecipazioni");
                });
#pragma warning restore 612, 618
        }
    }
}
